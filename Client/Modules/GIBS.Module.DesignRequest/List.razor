@using Oqtane.Models
@using System.Linq
@using Oqtane.Modules.Controls
@using GIBS.Module.DesignRequest.Models
@using System.Globalization

@namespace GIBS.Module.DesignRequest
@inherits ModuleBase
@inject Services.IDesignRequestService DesignRequestService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<List> Localizer

@if (_designRequests == null)
{
    <p><em>@Localizer["Loading..."]</em></p>
}
else
{
    <Pager Items="@_designRequests" PageSize="10" Class="table table-striped">
        <Header>      
                <th>@Localizer["Record"]</th>
                <th>@Localizer["Contact Name"]</th>
                <th>@Localizer["Project Name"]</th>
                <th>@Localizer["Status"]</th>
                <th>@Localizer["Assigned To"]</th>
                <th>@Localizer["Created On"]</th>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
        </Header>
        <Row>
                <td>@context.DesignRequestId</td>
                <td>@context.ContactName</td>
                <td>@context.ProjectName</td>
                <td>@context.Status</td>
                <td>@GetUserName(context.AssignedToUserId)</td>
                <td>@context.CreatedOn.ToShortDateString()</td>
                <td><ActionLink Action="Edit" Parameters="@($"id={context.DesignRequestId}")" Class="btn btn-primary btn-sm" 
                    Security="SecurityAccessLevel.Edit" ResourceKey="EditButton" Text="@Localizer["EditButton"]" /></td>
                <td><ActionDialog Header="@Localizer["Header.Delete"]" Message="@(Localizer["Message.Delete", context.ProjectName])" 
                    Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger btn-sm" 
                    OnClick="@(async () => await Delete(context.DesignRequestId))" ResourceKey="Delete" 
                    Id="@context.DesignRequestId.ToString()" /></td>
        </Row>
    </Pager>
}


@code {
    private List<Models.DesignRequest> _designRequests;
    private List<User> _users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the complete list of requests for client-side pagination
            var requests = await DesignRequestService.GetDesignRequestsAsync(ModuleState.ModuleId);
            _designRequests = requests.OrderByDescending(r => r.DesignRequestId).ToList();
            _users = await DesignRequestService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Design Requests {Error}", ex.Message);
            AddModuleMessage(Localizer["Error Loading Design Requests"], MessageType.Error);
        }
    }

    private string GetUserName(int userId)
    {
        if (userId == 0)
        {
            return "Unassigned";
        }
        var user = _users?.FirstOrDefault(u => u.UserId == userId);
        return user?.DisplayName ?? $"Unknown User ({userId})";
    }

    private void Edit(int designRequestId)
    {
        NavigationManager.NavigateTo(NavigateUrl("edit", $"id={designRequestId}"));
    }

    private async Task Delete(int designRequestId)
    {
        try
        {
            await DesignRequestService.DeleteDesignRequestAsync(designRequestId, ModuleState.ModuleId);
            await logger.LogInformation("Design Request Deleted {DesignRequestId}", designRequestId);
            await OnInitializedAsync(); // Refresh the entire list
            AddModuleMessage(Localizer["Design Request Deleted Successfully"], MessageType.Success);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Design Request {Error}", ex.Message);
            AddModuleMessage(Localizer["Error Deleting Design Request"], MessageType.Error);
        }
    }
}