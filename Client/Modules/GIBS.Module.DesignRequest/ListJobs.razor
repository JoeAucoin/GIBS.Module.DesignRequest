@using Oqtane.Models
@using System.Linq
@using Oqtane.Modules.Controls
@using Oqtane.Security
@using Oqtane.Services
@using GIBS.Module.DesignRequest.Models
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


@namespace GIBS.Module.DesignRequest
@inherits ModuleBase
@inject Services.IDesignRequestService DesignRequestService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ListJobs> Localizer
@inject ISettingService SettingService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject IProfileService ProfileService



@if (_designRequests == null)
{
    <p><em>@Localizer["Loading..."]</em></p>
}
else
{
    <Pager Items="@_designRequests" PageSize="10" Class="table table-striped">
        <Header>
        <th>@Localizer["Contact Name"]</th>
        <th>@Localizer["Project Name"]</th>
        <th>@Localizer["Status"]</th>
        <th>@Localizer["Assigned To"]</th>
        <th>@Localizer["Created On"]</th>
        <th>@Localizer["Updated On"]</th>
        <th style="width: 1px;">&nbsp;</th>
        <th style="width: 1px;">&nbsp;</th>
        </Header>
        <Row>
            <td>@context.ContactName</td>
            <td>@context.ProjectName</td>
            <td>@context.Status</td>
            <td>@GetUserName(context.AssignedToUserId)</td>
            <td>@context.CreatedOn.ToShortDateString()</td>
            <td>@context.ModifiedOn.ToShortDateString()</td>
            <td>
                <ActionLink Action="Edit" Parameters="@($"id={context.DesignRequestId}&r=c")" Class="btn btn-primary btn-sm"
                            Security="SecurityAccessLevel.View" ResourceKey="EditButton" Text="@Localizer["EditButton"]" />
            </td>
            <td>
                <ActionDialog Header="@Localizer["Header.Delete"]" Message="@(Localizer["Message.Delete", context.ProjectName])"
                              Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger btn-sm"
                              OnClick="@(async () => await Delete(context.DesignRequestId))" ResourceKey="Delete"
                              Id="@context.DesignRequestId.ToString()" />
            </td>
        </Row>
    </Pager>
}


@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;

    public override bool UseAdminContainer => false;

    private List<Models.DesignRequest> _designRequests;
    private List<User> _users;
    private bool IsDesignerRole { get; set; }
 //   private string _designerRole;
 //   private int _designerUserId = 0;
    private int _clientUserId = 0;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _clientUserId = this.PageState.User.UserId; // Default to current user
            // var settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            // _designerRole = SettingService.GetSetting(settings, "DesignerRole", "DesignRequest");

          //  await CheckUserRoleAsync(_designerRole.ToString());
            // Fetch the complete list of requests for client-side pagination
            var requests = await DesignRequestService.GetDesignRequestsAsync(ModuleState.ModuleId);
            IEnumerable<Models.DesignRequest> query = requests;

            if (_clientUserId > 0)
            {
                query = query.Where(r => r.UserId == _clientUserId);
            }
            _designRequests = query.OrderByDescending(r => r.DesignRequestId).ToList();
            _users = await DesignRequestService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Design Requests {Error}", ex.Message);
            AddModuleMessage(Localizer["Error Loading Design Requests"], MessageType.Error);
        }
    }

    // private async Task CheckUserRoleAsync(string _role)
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;
    //     IsDesignerRole = user.IsInRole(_role.ToString()) || user.IsInRole("Administrators");
    //     // IsDesignerRole = user.IsInRole(_role.ToString()) ;
    //     if (!IsDesignerRole)
    //     {
    //         var currentUser = user.Identity?.Name;
    //         await logger.LogError("User {User} does not have permission to view this module", currentUser);

    //         NavigationManager.NavigateTo(NavigateUrl());
    //         return; // Stop execution to prevent rendering
    //     }
    //     else
    //     {
    //         // If the user is in the designer role, set the designer user ID to the current user's ID
    //         var isDesigner = user.IsInRole(_role.ToString());
    //         if (isDesigner)
    //         {
    //             _designerUserId = PageState.User.UserId;
    //         }
    //         // else
    //         // {

    //         //     
    //         // }
    //     }

    // }

    private string GetUserName(int userId)
    {
        if (userId == 0)
        {
            return "Unassigned";
        }
        var user = _users?.FirstOrDefault(u => u.UserId == userId);
        return user?.DisplayName ?? $"Unknown User ({userId})";
    }

    private void Edit(int designRequestId)
    {
        NavigationManager.NavigateTo(NavigateUrl("edit", $"id={designRequestId}"));
    }

    private async Task Delete(int designRequestId)
    {
        try
        {
            await DesignRequestService.DeleteDesignRequestAsync(designRequestId, ModuleState.ModuleId);
            await logger.LogInformation("Design Request Deleted {DesignRequestId}", designRequestId);
            await OnInitializedAsync(); // Refresh the entire list
            AddModuleMessage(Localizer["Design Request Deleted Successfully"], MessageType.Success);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Design Request {Error}", ex.Message);
            AddModuleMessage(Localizer["Error Deleting Design Request"], MessageType.Error);
        }
    }
}